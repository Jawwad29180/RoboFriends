{"version":3,"sources":["serviceWorker.js","Components/Card/Card.js","Components/CardList/CardList.js","Components/SearchField/SearchField.js","Components/Scroll/Scroll.js","Containers/ErrorBoundry/ErrorBoundry.js","Containers/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","map","robot","i","key","SearchField","onSearchChanged","onChange","type","placeholder","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAW,+CACZ,yBAAKC,IAAG,mCAA8BJ,EAA9B,aAA6CK,IAAI,QACzD,6BACR,qCAAWJ,GACX,qCAAWC,MCYAI,G,MAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,yBAAKJ,UAAU,8BAEPI,EAAOC,KAAI,SAACC,EAAOC,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAMF,EAAMT,GAAIA,GAAIS,EAAMT,GAAIC,KAAMQ,EAAMR,KAAMC,MAAOO,EAAMP,cCA/EU,EARK,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAClB,OACI,yBAAKV,UAAW,OACZ,2BAAQW,SAAYD,EAAiBV,UAAW,MAAMY,KAAK,SAASC,YAAc,oBCK/EC,G,MARA,SAACC,GACZ,OACI,yBAAKf,UAAU,0CACVe,EAAMC,YCiBJC,E,kDAlBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAU,GAHL,E,8DAOKC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,6BAEtBJ,GACE,OAAIO,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKP,MAAMC,a,GAhBJQ,aC4DZC,G,wDArDX,aAAe,IAAD,8BACV,gBAOJf,gBAAkB,SAACgB,GACf,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SAP1C,EAAKX,MAAQ,CACTd,OAAQ,GACRuB,YAAa,IAJP,E,gEAYO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEnB,OAAQ8B,S,+BAIrC,IAAD,EAC2BZ,KAAKJ,MAA7Bd,EADH,EACGA,OAAQuB,EADX,EACWA,YACVQ,EAAiB/B,EAAOgC,QAAO,SAAA9B,GACjC,OAAOA,EAAMR,KAAKuC,cAAcC,SAASX,EAAYU,kBAIzD,OAAKjC,EAAOmC,OAWJ,6BACI,4CACA,kBAAC,EAAD,CAAa7B,gBAAiBY,KAAKZ,kBACnC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUN,OAAQ+B,OAf1B,6BACJ,4CACA,kBAAC,EAAD,CAAazB,gBAAiBY,KAAKZ,kBAEnC,iD,GAjCEc,cCElBgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK1C,UAAU,MACX,kBAAC,EAAD,QAGN2C,SAASC,eAAe,SPoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.9a64f925.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className= \"tc grow bw2 shadow-5 bg-light-green mh2 mv1\">\r\n            <img src={`https://robohash.org/Test${id}}?200x200`} alt=\"alt\"></img>\r\n            <div>\r\n    <h2>Name: {name}</h2>\r\n    <p>Email: {email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({robots}) => {\r\n \r\n    return (\r\n        <div className=\"tc flex flex-wrap cardlist\">\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return <Card key= {robot.id} id={robot.id} name={robot.name} email={robot.email}/>\r\n                    })\r\n            }\r\n        </div>\r\n          \r\n    );\r\n    \r\n\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchField = ({onSearchChanged}) => {\r\n    return (\r\n        <div className =\"pv3\">\r\n            <input  onChange = {onSearchChanged} className =\"pv2\" type=\"search\" placeholder = \"search robots\" ></input>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default SearchField;","import React from 'react';\r\nimport \"./Scroll.css\"\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className=\"b--solid br2 b--light-silver scrollDiv\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n    render(props) {        \r\n             if (this.state.hasError) {\r\n                 return <h1>Ein Fehler ist passiert!</h1>\r\n             }\r\n             return this.props.children;\r\n            }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport CardList from '../../Components/CardList/CardList';\r\nimport SearchField from \"../../Components/SearchField/SearchField\";\r\nimport Scroll from \"../../Components/Scroll/Scroll\";\r\nimport ErrorBoundry from \"../ErrorBoundry/ErrorBoundry\";\r\n\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    onSearchChanged = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }));\r\n\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        }\r\n        )\r\n\r\n        if (!robots.length) {\r\n            return (<div>\r\n                <h1>Robo Friends</h1>\r\n                <SearchField onSearchChanged={this.onSearchChanged} />\r\n\r\n                <h1>loading data</h1>\r\n\r\n            </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h1>Robo Friends</h1>\r\n                    <SearchField onSearchChanged={this.onSearchChanged} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\n\r\nimport App from \"./Containers/App/App\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"tc\"> \r\n        <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}